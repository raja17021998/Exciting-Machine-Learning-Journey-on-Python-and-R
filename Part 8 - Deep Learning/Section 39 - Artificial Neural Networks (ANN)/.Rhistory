R<-"Python"
R
q()
a<="::"
a<-"j::::"
a
q()
u,<-7
u<-7
u
q()
setwd("E:/Machine Learning Files/Machine Learning A-Z Template Folder/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)")
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
install.packages('h2o')
library(h2o)
h2o.init(nthreads= -1)
h2o.init(nthreads= -1)
classifier= h2o.deeplearning(y= 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
y_pred = h2o.predict(model, newdata = as.h2o(test_set[-11]))
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.65)
y_pred = as.vector(y_pred)
cm = table(test_set[, 11], y_pred)
cm
(1566+141)/2000
y_pred = (y_pred > 0.55)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.95)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
(1588+53)/2000
y_pred = (y_pred > 0.25)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
1588+53
1641/2000
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.50)
y_pred = as.vector(y_pred)
cm = table(test_set[, 11], y_pred)
cm
1529+201
1730/2000
classifier= h2o.deeplearning(y= 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(10,10),
epochs = 200,
train_samples_per_iteration = -2)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.50)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
1530+199
1729/2000
classifier= h2o.deeplearning(y= 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(100,100),
epochs = 200,
train_samples_per_iteration = -2)
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.50)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
1479+200
1679/2000
classifier= h2o.deeplearning(y= 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,5),
epochs = 100,
train_samples_per_iteration = -2)
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.50)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
1532+197
1729/2000
classifier= h2o.deeplearning(y= 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.50)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
1523+187
1710/2000
h2o.shutdown()
